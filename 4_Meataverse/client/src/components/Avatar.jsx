/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useFrame, useGraph } from "@react-three/fiber";
import { cameraPositionAtom, socket, userAtom } from "./SocketManager";
import { useAtom } from "jotai";
import { useGrid } from "../hooks/useGridHook";
const MOVEMENT_SPEED = 0.032;
export function Avatar({
  hairColor = "green",
  topColor = "red",
  bottomColor = "yellow",
  feetColor = "blue",
  id,
  avatarUrl,
  ...props
}) {
  const [cameraPosition] = useAtom(cameraPositionAtom);
  const avatar = useRef();

  const position = useMemo(() => props.position, []);
  const [path, setPath] = useState([]);
  const { gridToVector3 } = useGrid();

  useEffect(() => {
    const path = [];
    props?.path?.forEach((gridPosition) => {
      path.push(gridToVector3(gridPosition));
    });
    setPath(path);
  }, [props.path]);

  const group = useRef();

  // Nodes come Here Bydefault
  const { scene } = useGLTF(avatarUrl);

  // Follwoing Is TO Avoid The Merge Of the Two Models
  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  // Own Animations
  const { animations: walkAnimation } = useGLTF("/animations/M_Walk_001.glb");
  const { animations: danceAnimation } = useGLTF(
    "/animations/M_Dances_001.glb"
  );
  const { animations: idleAnimation } = useGLTF(
    "/animations/M_Standing_Idle_001.glb"
  );

  const animations = [walkAnimation[0], danceAnimation[0], idleAnimation[0]];

  const { actions } = useAnimations(animations, avatar);

  const [animation, setAnimation] = useState("M_Standing_Idle_001");
  const [user] = useAtom(userAtom);
  const [isDancing, setIsDancing] = useState(false);

  useEffect(() => {
    clone.traverse((child) => {
      if (child.isMesh) {
        child.castShadow = true;
        child.receiveShadow = true;
      }
    });
  }, []);

  useEffect(() => {
    actions[animation]?.reset()?.fadeIn(0.5)?.play();
    return () => actions[animation]?.fadeOut(0.5);
  }, [animation]);

  useEffect(() => {
    // On Player Dancing Animation
    function onPlayerDance(value) {
      if (!value) return;
      if (isDancing) {
        actions[animation]?.fadeOut(0.5);
        setIsDancing(false);
        return;
      }
      if (value.id === id) {
        setIsDancing(true);
      }
    }

    socket.on("playerDance", onPlayerDance);

    return () => {
      socket.off("playerDance", onPlayerDance);
    };
  }, [id]);

  useFrame((state) => {
    const hips = avatar.current.getObjectByName("Hips");
    hips.position.set(0, hips.position.y, 0);
    if (path?.length > 0 && group.current.position.distanceTo(path[0]) > 1.0) {
      const direction = group.current.position
        .clone()
        .sub(path[0])
        .normalize()
        .multiplyScalar(MOVEMENT_SPEED);
      group.current.position.sub(direction);
      group.current.lookAt(path[0]);
      // setAnimation("CharacterArmature|Run"); // Polypizza
      setAnimation("M_Walk_001");
      setIsDancing(false);
    } else if (path?.length) {
      path.shift();
      setAnimation("M_Walk_001");
    } else {
      if (isDancing) {
        setAnimation("M_Dances_001");
      } else {
        setAnimation("M_Standing_Idle_001");
      }
    }

    if (id === user) {
      state.camera.position.x = group.current.position.x + cameraPosition;
      state.camera.position.y = group.current.position.y + cameraPosition;
      state.camera.position.z = group.current.position.z + cameraPosition;
      state.camera.lookAt(group.current.position);
    }
  });

  return (
    <group
      ref={group}
      {...props}
      position={position}
      dispose={null}
      name={`character-${user}`}
    >
      {/* IF USE THE Poly Pizza Model */}
      {/* <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="CharacterArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Root} />
          </group>
          <group name="Casual_Body" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Casual_Body_1"
              geometry={nodes.Casual_Body_1.geometry}
              material={materials.White}
              skeleton={nodes.Casual_Body_1.skeleton}
              castShadow
            >
              <meshStandardMaterial color={topColor} />
            </skinnedMesh>
            <skinnedMesh
              name="Casual_Body_2"
              geometry={nodes.Casual_Body_2.geometry}
              material={materials.Skin}
              skeleton={nodes.Casual_Body_2.skeleton}
              castShadow
            ></skinnedMesh>
          </group>
          <group name="Casual_Feet" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Casual_Feet_1"
              geometry={nodes.Casual_Feet_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Casual_Feet_1.skeleton}
              castShadow
            ></skinnedMesh>
            <skinnedMesh
              name="Casual_Feet_2"
              geometry={nodes.Casual_Feet_2.geometry}
              material={materials.Grey}
              skeleton={nodes.Casual_Feet_2.skeleton}
              castShadow
            >
              <meshStandardMaterial color={feetColor} />
            </skinnedMesh>
          </group>
          <group name="Casual_Head" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Casual_Head_1"
              geometry={nodes.Casual_Head_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Casual_Head_1.skeleton}
              castShadow
            ></skinnedMesh>
            <skinnedMesh
              name="Casual_Head_2"
              geometry={nodes.Casual_Head_2.geometry}
              material={materials.Hair_Blond}
              skeleton={nodes.Casual_Head_2.skeleton}
              castShadow
            >
              <meshStandardMaterial color={hairColor} />
            </skinnedMesh>
            <skinnedMesh
              name="Casual_Head_3"
              geometry={nodes.Casual_Head_3.geometry}
              material={materials.Hair_Brown}
              skeleton={nodes.Casual_Head_3.skeleton}
              castShadow
            />
            <skinnedMesh
              name="Casual_Head_4"
              geometry={nodes.Casual_Head_4.geometry}
              material={materials.Brown}
              skeleton={nodes.Casual_Head_4.skeleton}
              castShadow
            />
          </group>
          <skinnedMesh
            name="Casual_Legs"
            geometry={nodes.Casual_Legs.geometry}
            material={materials.Orange}
            skeleton={nodes.Casual_Legs.skeleton}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
            castShadow
          >
            <meshStandardMaterial color={bottomColor} />
          </skinnedMesh>
        </group>
      </group> */}

      <primitive object={clone} ref={avatar} />
    </group>
  );
}

// useGLTF.preload("./models/Animated Woman.glb");

useGLTF.preload("/animations/M_Walk_001.glb");
useGLTF.preload("/animations/M_Standing_Idle_001.glb");
useGLTF.preload("/animations/M_Dances_001.glb");
